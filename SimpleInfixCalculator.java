/*
 * SimpleInfixCalculator.java -- Interprets simple arithmetic expressions.
 *
 * Examples of usage:
 * $ echo 5 | java SimpleInfixCalculator
 * 5
 *
 * $ echo "2 + 3" | java SimpleInfixCalculator
 * 5
 *
 * $ echo "(3 * 2 + 1) * 5 | java SimpleInfixCalculator
 * 35
 *
 * Michael McThrow
 * CS 152 -- Section 06
 * San Jos√© State University
 * Fall 2021
 */
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import java.io.*;

public class SimpleInfixCalculator {
    public static void main(String[] args) throws IOException {
        // 1. Read input from standard input, creating a character stream.
        BufferedReader in =
         new BufferedReader(new InputStreamReader(System.in));
        CharStream inputStream = CharStreams.fromReader(in);

        // 2. Perform lexical analysis on the character stream.  The purpose
        // of the error listener is to throw an exception whenever the lexer
        // encounters a syntax error.
        SimpleArithLexer lexer = new SimpleArithLexer(inputStream);
        lexer.addErrorListener(new BaseErrorListener() {
            @Override
            public void syntaxError(Recognizer<?, ?> r, Object o, int l, int c,
             String msg, RecognitionException e) {
                throw new RuntimeException(e);
            }
        });
        CommonTokenStream commonTokenStream = new CommonTokenStream(lexer);

        // 3. Parse the stream of tokens generated by the lexer by calling
        // the expr() method, which corresponds to SimpleArith's expr rule.
        SimpleArithParser parser = new SimpleArithParser(commonTokenStream);
        parser.setErrorHandler(new BailErrorStrategy());
        ParseTree tree = parser.expr();

        // 4. Given the resulting parse tree, evaluate it.
        SimpleArithEvaluator evaluator = new SimpleArithEvaluator();
        Integer result = evaluator.visit(tree);

        // 5. Print result
        System.out.println(result);
    }
}
